/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define DEFAULT 0
#define NUM     1
#define BT      2

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
  combo_##NAME { \
    timeout-ms = <60>; \
    require-prior-idle-ms = <300>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
  };

&mt {
  tapping-term-ms = <230>;
  require-prior-idle-ms = <300>;
  quick-tap-ms = <100>;
  flavor = "tap-preferred";
};

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <210>;
      quick-tap-ms = <100>;
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
    };

    tdDelBslh: DEL_BSLASH {
      compatible = "zmk,behavior-tap-dance";
      label = "delbslh";
      #binding-cells = <0>;
      tapping-term-ms = <300>;
      bindings = <&kp BSPC>, <&kp BSPC>, <&kp BSLH>;
    };

    tdAMinus: A_MINUS {
      compatible = "zmk,behavior-tap-dance";
      label = "aminus";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp A>, <&kp MINUS>;
    };

    tdSPlus: s_PLUS {
      compatible = "zmk,behavior-tap-dance";
      label = "splus";
      #binding-cells = <0>;
      tapping-term-ms = <170>;
      bindings = <&kp S>, <&kp EQUAL>;
    };

    tdLSemi: l_SEMI {
      compatible = "zmk,behavior-tap-dance";
      label = "lsemi";
      #binding-cells = <0>;
      tapping-term-ms = <190>;
      bindings = <&kp L>, <&kp SEMI>;
    };

    tdApsGrv: APOS_GRAVE {
      compatible = "zmk,behavior-tap-dance";
      label = "aposgrave";
      #binding-cells = <0>;
      tapping-term-ms = <190>;
      bindings = <&kp APOS>, <&kp GRAVE>;
    };
    
    tdRetCaps: RET_CAPs {
      compatible = "zmk,behavior-tap-dance";
      label = "retcaps";
      #binding-cells = <0>;
      tapping-term-ms = <190>;
      bindings = <&kp RET>, <&kp CAPS>;
    };

    tdCXZ: z_x {
      compatible = "zmk,behavior-tap-dance";
      label = "cxz";
      #binding-cells = <0>;
      tapping-term-ms = <220>;
      bindings = <&kp C>, <&kp X>, <&kp Z>;
    };

    tdCommaLbkt: COMMA_LBKT{
      compatible = "zmk,behavior-tap-dance";
      label = "commalbkt";
      #binding-cells = <0>;
      tapping-term-ms = <190>;
      bindings = <&kp COMMA>, <&kp LBKT>;
    };

    tdDotBrkt: DOT_RBKT {
      compatible = "zmk,behavior-tap-dance";
      label = "dotbrkt";
      #binding-cells = <0>;
      tapping-term-ms = <190>;
      bindings = <&mt LEFT DOT>, <&kp RBKT>;
     };

    tdBspcDllr: BSPC_DLLR {
      compatible = "zmk,behavior-tap-dance";
      label = "bspc_dllr";
      #binding-cells = <0>;
      tapping-term-ms = <210>;
      bindings = <&kp BSPC>, <&kp DLLR>;
    };

 };
combos {
        compatible = "zmk,combos";
                      
      COMBO(fnOne, &kp F1, 1 11, DEFAULT NUM BT)
      COMBO(fTwo, &kp F2, 2 11, DEFAULT NUM BT)
      COMBO(fThree, &kp F3, 3 11, DEFAULT NUM BT)
      COMBO(fFour, &kp F4, 4 11, DEFAULT NUM BT)
      COMBO(fFive, &kp F5, 5 11, DEFAULT NUM BT)
      COMBO(fSix, &kp F6, 6 11, DEFAULT NUM BT)
      COMBO(fSeven, &kp F7, 7 0, DEFAULT NUM BT)
      COMBO(fEight, &kp F8, 8 0, DEFAULT NUM BT)
      COMBO(fNine, &kp F9, 9 0, DEFAULT NUM BT)
      COMBO(fTen, &kp F10, 10 0, DEFAULT NUM BT)
      COMBO(fEleven, &kp F11, 11 0, DEFAULT NUM BT) 

      COMBO(del, &kp DEL, 22 23, DEFAULT NUM BT)


      COMBO(caps, &kp CAPS, 12 23, DEFAULT NUM BT)

      COMBO(J, &kp J, 16 19, DEFAULT)
      COMBO(X, &kp X, 19 27, DEFAULT)
      COMBO(Z, &kp Z, 11 27, DEFAULT)

      COMBO(briDn, &kp C_BRI_DN, 0 1, DEFAULT NUM BT)
      COMBO(briUP, &kp C_BRI_UP, 1 2, DEFAULT NUM BT)
      COMBO(mute, &kp C_MUTE, 7 8 9, DEFAULT NUM BT)
      COMBO(volup, &kp C_VOL_UP,9 10, DEFAULT NUM BT)
      COMBO(voldn, &kp C_VOL_DN, 7 8, DEFAULT NUM BT)

      
      COMBO(dfltLyr, &to 0, 8 32, DEFAULT NUM BT)
      COMBO(numLyr, &to 1, 9 33, DEFAULT NUM BT)
      COMBO(btLyr, &to 2, 10 34, DEFAULT NUM BT)
      COMBO(btOut, &out OUT_TOG, 17 18, DEFAULT NUM BT)

      COMBO(left, &kp LEFT, 19 20, DEFAULT NUM BT)
      COMBO(up, &kp UP, 8 9, DEFAULT NUM BT)
      COMBO(down, &kp DOWN, 32 33, DEFAULT NUM BT)
      COMBO(right, &kp RIGHT, 20 21, DEFAULT NUM BT)

      COMBO(pageup, &kp PG_UP, 8 9 16, DEFAULT NUM BT)
      COMBO(pageDp, &kp PG_DN, 16 32 33, DEFAULT NUM BT)
      COMBO(home, &kp HOME, 18 19, DEFAULT NUM BT)
      COMBO(end, &kp END, 21 22, DEFAULT NUM BT)
    };


keymap {
    compatible = "zmk,keymap";	

  default_layer {
    bindings = <

&mt ESC TAB   &mt N1 Q     &mt N2 W   &mt N3 E  &mt N4 R    &mt N5 T    &mt N6 Y    &mt N7 U    &mt N8 I    &mt N9 O   &mt N0 P   &tdDelBslh
&kp LSHFT   &tdAMinus    &tdSPlus     &kp D     &kp F      &kp G     &kp H    &mt J SPACE   &kp K   &tdLSemi     &tdApsGrv  &kp RET
&kp LCTRL   &kp LALT     &kp LGUI    &tdCXZ   &mt SPACE V   &mt SPACE B   &mt SPACE N  &mt SPACE M   &tdCommaLbkt  &tdDotBrkt  &kp FSLH   &kp RSHFT 

            >;
        };	

  Num_layer {
    bindings = <

&mt ESC TAB      &kp N7    &kp N8    &kp N9   &tdBspcDllr  &kp PRCNT   &kp CARET    &kp AMPS     &kp STAR     &kp UP      &kp N0     &tdDelBslh
&kp LSHFT   &kp N4    &kp N5    &kp N6   &kp MINUS    &kp TAB     &mt BSPC X   &kp SPACE    &kp LEFT     &tdLSemi    &tdApsGrv  &sk RET	
&mt DOT N0  &kp N1    &kp N2 	  &kp N3   &kp EQUAL    &kp RET     &kp SPACE    &kp SPACE    &kp COMMA    &kp DOT     &kp FSLH   &sk RSHFT 
    >;
  };


  Bt_layer {
    bindings = <

&bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4 &kp B &kp B &kp C_BRI_DN  &kp C_BRI_UP  &kp C_VOL_DN  &kp C_MUTE &kp C_VOL_UP 
&kp B &kp B &kp B &kp B &bt BT_CLR &bt BT_CLR_ALL &kp B &kp B &kp B &kp B &kp B &kp B 
&kp B &kp B &kp B &kp B &kp B &kp B &kp B &kp B &kp B &kp B &kp B &kp B 
    >;
  };

 };
};
